openapi: 3.0.0
info:
  version: 1.0.0
  title: Vizsgaremek Server API Dokumentation
  description: Detailed description and use of Vizsgaremek's paths
servers:
  - url: http://localhost:3000
paths:
  /children:
    get:
      description: Return a list of children
      security: 
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content: 
            application/json:
              schema: 
                type: array
                items: 
                  $ref: '#/components/schemas/Child'
    post:
      description: Creates a new child
      security: 
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Child'
      responses:
        '201':
          description: Child has been created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Child'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /children/{_id}:
    get:
      description: Get a child
      security: 
        - bearerAuth: []
      parameters:
        - in: path
          name: _id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content: 
            application/json:
              schema: 
                type: object
                items: 
                  $ref: '#/components/schemas/Child'
        '404':
          description: Child based on id isn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      description: Updates a child
      parameters:
        - in: path
          name: _id
          required: true
          schema: 
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Child'
      responses:
        '200':
          description: Child has been updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Child'
        '501':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      description: Removes a child
      parameters:
        - in: path
          name: _id
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: Child has been deleted successfully
          content:
            application/json:
              schema:
                type: object
                example: {}
        '404':
          description: Child based on id isn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /employees:
    get:
      description: Return a list of employees
      security: 
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content: 
            application/json:
              schema: 
                type: array
                items: 
                  $ref: '#/components/schemas/Employee'
    post:
      description: Creates a new employee
      security: 
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employee'
      responses:
        '201':
          description: Employee has been created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /employees/{_id}:
    get:
      description: Get an employee
      security: 
        - bearerAuth: []
      parameters:
        - in: path
          name: _id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content: 
            application/json:
              schema: 
                type: object
                items: 
                  $ref: '#/components/schemas/Employee'
        '404':
          description: Employee based on id isn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      description: Updates a Employee
      parameters:
        - in: path
          name: _id
          required: true
          schema: 
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employee'
      responses:
        '200':
          description: Employee has been updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '501':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      description: Removes an employee
      parameters:
        - in: path
          name: _id
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: Employee has been deleted successfully
          content:
            application/json:
              schema:
                type: object
                example: {}
        '404':
          description: Employee based on id isn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /groups:
    get:
      description: Return a list of groups
      security: 
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content: 
            application/json:
              schema: 
                type: array
                items: 
                  $ref: '#/components/schemas/Group'
    post:
      description: Creates a new group
      security: 
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        '201':
          description: Group has been created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /groups/{_id}:
    get:
      description: Get a group
      security: 
        - bearerAuth: []
      parameters:
        - in: path
          name: _id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content: 
            application/json:
              schema: 
                type: object
                items: 
                  $ref: '#/components/schemas/Group'
        '404':
          description: Group based on id isn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      description: Updates a group
      parameters:
        - in: path
          name: _id
          required: true
          schema: 
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        '200':
          description: Group has been updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '501':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      description: Removes a group
      parameters:
        - in: path
          name: _id
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: Group has been deleted successfully
          content:
            application/json:
              schema:
                type: object
                example: {}
        '404':
          description: Group based on id isn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /kindergatens:
    get:
      description: Return a list of kindergatens
      security: 
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content: 
            application/json:
              schema: 
                type: array
                items: 
                  $ref: '#/components/schemas/Kindergarten'
    post:
      description: Creates a new kindergarten
      security: 
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Kindergarten'
      responses:
        '201':
          description: Kindergarten has been created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Kindergarten'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /kindergatens/{_id}:
    get:
      description: Get a kindergarten
      security: 
        - bearerAuth: []
      parameters:
        - in: path
          name: _id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content: 
            application/json:
              schema: 
                type: object
                items: 
                  $ref: '#/components/schemas/Kindergarten'
        '404':
          description: Kindergarten based on id isn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      description: Updates a kindergarten
      parameters:
        - in: path
          name: _id
          required: true
          schema: 
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Kindergarten'
      responses:
        '200':
          description: Kindergarten has been updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Kindergarten'
        '501':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      description: Removes a kindergarten
      parameters:
        - in: path
          name: _id
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: Kindergarten has been deleted successfully
          content:
            application/json:
              schema:
                type: object
                example: {}
        '404':
          description: Kindergarten based on id isn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /specialclasses:
    get:
      description: Return a list of special classes
      security: 
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content: 
            application/json:
              schema: 
                type: array
                items: 
                  $ref: '#/components/schemas/SpecialClass'
    post:
      description: Creates a new special class
      security: 
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpecialClass'
      responses:
        '201':
          description: Special class has been created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpecialClass'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /specialclasses/{_id}:
    get:
      description: Get a special class
      security: 
        - bearerAuth: []
      parameters:
        - in: path
          name: _id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content: 
            application/json:
              schema: 
                type: object
                items: 
                  $ref: '#/components/schemas/SpecialClass'
        '404':
          description: Special class based on id isn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      description: Updates a special class
      parameters:
        - in: path
          name: _id
          required: true
          schema: 
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpecialClass'
      responses:
        '200':
          description: Special class has been updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpecialClass'
        '501':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      description: Removes a special class
      parameters:
        - in: path
          name: _id
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: Special class has been deleted successfully
          content:
            application/json:
              schema:
                type: object
                example: {}
        '404':
          description: Special class based on id isn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users:
    get:
      description: Return a list of users
      security: 
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content: 
            application/json:
              schema: 
                type: array
                items: 
                  $ref: '#/components/schemas/User'
    post:
      description: Creates a new user
      security: 
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User has been created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /kindergatens/{_id}:
    get:
      description: Get a user
      security: 
        - bearerAuth: []
      parameters:
        - in: path
          name: _id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content: 
            application/json:
              schema: 
                type: object
                items: 
                  $ref: '#/components/schemas/User'
        '404':
          description: User based on id isn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      description: Updates a User
      parameters:
        - in: path
          name: _id
          required: true
          schema: 
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User has been updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '501':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      description: Removes a user
      parameters:
        - in: path
          name: _id
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: User has been deleted successfully
          content:
            application/json:
              schema:
                type: object
                example: {}
        '404':
          description: User based on id isn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Child:
      type: object
      required:
        - surname
        - firstname
        - kindergarten
        - group
        - age
        - mothername
        - phone
      properties:
        surname: 
          type: string
        firstname: 
          type: string
        kindergarten: 
          type: object
          $ref: '#/components/schemas/Kindergarten'
        group: 
          type: object
          $ref: '#/components/schemas/Group'
        age:
          type: number
        mothername: 
          type: string
        phone:
          type: string
        picture:
          type: string
        active: 
          type: boolean
    Employee:
      type: object
      required:
        - surname
        - firstname
        - kindergarten
        - position
      properties:
        surname: 
          type: string
        firstname: 
          type: string
        position:
          type: string
        kindergarten: 
          type: object
          $ref: '#/components/schemas/Kindergarten'
        group: 
          type: object
          $ref: '#/components/schemas/Group'
        skills: 
          type: string
        image:
          type: string
        active: 
          type: boolean
    Group:
      type: object
      required:
        - name
        - kindergarten
        - teacherFirst
        - teacherSecond
        - nurse
        - ageGroup
        - maxHeadcount
        - actualHeadcount
      properties:
        name:
          type: string
        kindergarten: 
          type: object
          $ref: '#/components/schemas/Kindergarten'
        teacherFirst:
          type: string
        teacherSecond:
          type: string
        nurse:
          type: string
        ageGroup:
          type: string
        maxHeadcount:
          type: number
        actualHeadcount:
          type: number
        image:
          type: string
        active: 
          type: boolean
    Kindergarten:
      type: object
      required:
        - name
        - address
        - numOfEmployees
        - numOfGroups
        - maxHeadcountOfChildren
        - actualHeadcountOfChildren
      properties:
        name: 
          type: string
        address: 
          type: string
        numOfEmployees: 
          type: number
        numOfGroups: 
          type: number
        maxHeadcountOfChildren:
          type: number
        actualHeadcountOfChildren:
          type: number
        image:
          type: string
    SpecialClass:
      type: object
      required:
        - name
        - kindergarten
        - teacher
        - day
        - actualHeadcount
      properties:
        name:
          type: string
        level:
          type: string
        kindergarten: 
          type: object
          $ref: '#/components/schemas/Kindergarten'
        teacher:
          type: string
        day:
          type: string
        maxHeadcount:
          type: number
        actualHeadcount:
          type: number
        active: 
          type: boolean
    Error:
      type: object
      required:
        - message
        - has_error
      properties:
        message:
          type: string
        has_error:
          type: boolean
