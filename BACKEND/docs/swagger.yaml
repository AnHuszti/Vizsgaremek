openapi: 3.0.0
info:
  version: 1.0.0
  title: Vizsgaremek Server API Dokumentation
  description: Detailed description and use of Vizsgaremek's paths
servers:
  - url: http://localhost:3000
paths:
  /children:
    get:
      description: Return a list of children
      security: 
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content: 
            application/json:
              schema: 
                type: array
                items: 
                  $ref: '#/components/schemas/Child'
    post:
      description: Creates a new child
      security: 
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Child'
      responses:
        '201':
          description: Child has been created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Child'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /children/{_id}:
    get:
      description: Get a child
      security: 
        - bearerAuth: []
      parameters:
        - in: path
          name: _id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content: 
            application/json:
              schema: 
                type: object
                items: 
                  $ref: '#/components/schemas/Child'
        '404':
          description: Child based on id isn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      description: Updates a child
      parameters:
        - in: path
          name: _id
          required: true
          schema: 
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Child'
      responses:
        '200':
          description: Child has been updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Child'
        '501':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      description: Removes a child
      parameters:
        - in: path
          name: _id
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: Child has been deleted successfully
          content:
            application/json:
              schema:
                type: object
                example: {}
        '404':
          description: Child based on id isn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /employees:
    get:
      description: Return a list of employees
      security: 
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content: 
            application/json:
              schema: 
                type: array
                items: 
                  $ref: '#/components/schemas/Employee'
    post:
      description: Creates a new employee
      security: 
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employee'
      responses:
        '201':
          description: Employee has been created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /employees/{_id}:
    get:
      description: Get an employee
      security: 
        - bearerAuth: []
      parameters:
        - in: path
          name: _id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content: 
            application/json:
              schema: 
                type: object
                items: 
                  $ref: '#/components/schemas/Employee'
        '404':
          description: Employee based on id isn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      description: Updates a Employee
      parameters:
        - in: path
          name: _id
          required: true
          schema: 
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employee'
      responses:
        '200':
          description: Employee has been updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '501':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      description: Removes an employee
      parameters:
        - in: path
          name: _id
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: Employee has been deleted successfully
          content:
            application/json:
              schema:
                type: object
                example: {}
        '404':
          description: Employee based on id isn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Child:
      type: object
      required:
        - surname
        - firstname
        - kindergarten
        - group
        - age
        - mothername
        - phone
      properties:
        surname: 
          type: string
        firstname: 
          type: string
        kindergarten: 
          type: mongoose.Schema.Types.ObjectId
          ref: 'Kindergarten'
        group: 
          type: mongoose.Schema.Types.ObjectId
          ref: 'Group'
        age:
          type: number
        mothername: 
          type: string
        phone:
          type: string
        picture:
          type: string
        active: 
          type: boolean
    Employee:
      type: object
      required:
        - surname
        - firstname
        - kindergarten
        - position
      properties:
        surname: 
          type: string
        firstname: 
          type: string
        kindergarten: 
          type: mongoose.Schema.Types.ObjectId
          ref: 'Kindergarten'
        position:
          type: string
        group: 
          type: mongoose.Schema.Types.ObjectId
          ref: 'Group'
        skills: 
          type: string
        image:
          type: string
        active: 
          type: boolean
    Error:
      type: object
      required:
        - message
        - has_error
      properties:
        message:
          type: string
        has_error:
          type: boolean
